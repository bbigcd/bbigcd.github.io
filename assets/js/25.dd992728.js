(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{228:function(t,e,a){"use strict";a.r(e);var i=a(0),s=Object(i.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[a("a",{attrs:{href:"https://www.asp.net/media/4071077/aspnet-web-api-poster.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("ASP.NET Web Api 2 Http 消息生命周期"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/1366611-540605ae803d1901.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:""}})]),t._v(" "),a("h3",{attrs:{id:"iis-hosting-与-owin-self-hosting"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#iis-hosting-与-owin-self-hosting"}},[t._v("#")]),t._v(" IIS Hosting 与 OWIN Self-Hosting")]),t._v(" "),a("ul",[a("li",[t._v("IIS Hosting\n是指将 ASP.NET Web Api 程序发布到 IIS Manager 的方式运行")]),t._v(" "),a("li",[t._v("OWIN Self-Hosting\n是指ASP.NET Web Api程序以自宿主的方式运行，不依赖 IIS ，在 .NET Core 中，默认以自宿主的方式运行程序，其服务器为 "),a("a",{attrs:{href:"https://docs.microsoft.com/zh-cn/aspnet/core/fundamentals/servers/kestrel?view=aspnetcore-2.1&tabs=aspnetcore2x",target:"_blank",rel:"noopener noreferrer"}},[t._v("kestrel"),a("OutboundLink")],1)])]),t._v(" "),a("h3",{attrs:{id:"http-request"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-request"}},[t._v("#")]),t._v(" HTTP Request")]),t._v(" "),a("p",[t._v("无论是以哪种方式运行，当接收到一个 HTTP Request 的时候，HTTP Request 消息在第一时间会被转化为一个 HttpRequestMessage 对象，这个 HttpRequestMessage 提供了对 HTTP 消息的强类型访问对象；")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/1366611-9c08cce25e5c6f75.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:""}})]),t._v(" "),a("h3",{attrs:{id:"delegatinghandler"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#delegatinghandler"}},[t._v("#")]),t._v(" DelegatingHandler")]),t._v(" "),a("p",[t._v("HTTP message handles (HTTP 消息处理器)处于整个处理管道中的第一步，它们在进入时处理 HTTP 请求消息，在退出时处理 HTTP 响应消息。")]),t._v(" "),a("p",[t._v("如果想自定义一个 message handle （消息处理器）,可以从 DelegatingHandler 这个类派生得到，并且可以添加多个自定义的消息处理器。")]),t._v(" "),a("p",[t._v("消息处理器可以是全局的，也可以是指定给特定的一个路由的。每个路由中的消息处理器仅在该对应的路由被相应的请求匹配的时候触发。所有的路由消息处理器在路由表中配置。")]),t._v(" "),a("blockquote",[a("p",[t._v("值得注意的是，消息处理器可以直接创建一个响应，使得管道中的其余操作都被跳过。")])]),t._v(" "),a("h3",{attrs:{id:"httproutingdispatcher"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#httproutingdispatcher"}},[t._v("#")]),t._v(" HttpRoutingDispatcher")]),t._v(" "),a("p",[t._v("如果Route.Handle为空，则进入 HttpControllerDispatcher ，否则进入 Per-route Message Handles 中进行路由处理器处理，再进入 HttpMessageHandler")]),t._v(" "),a("h3",{attrs:{id:"httpmessagehandler"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#httpmessagehandler"}},[t._v("#")]),t._v(" HttpMessageHandler")]),t._v(" "),a("p",[t._v("HttpMessageHandler 消息处理器可以调用 HttpControllerDispatcher 并返回到主管道中，或者直接提供一个自定义的返回标志。")]),t._v(" "),a("h3",{attrs:{id:"httpcontrollerdispatcher"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#httpcontrollerdispatcher"}},[t._v("#")]),t._v(" HttpControllerDispatcher")]),t._v(" "),a("p",[t._v("HttpControllerDispatcher 消息处理可以创建一个响应，使得管道中的其余操作都被跳过。\n其主要的职责为创建 API 控制器")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/1366611-465993ab89acefed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:""}})]),t._v(" "),a("p",[t._v("分两个步骤")]),t._v(" "),a("ul",[a("li",[t._v("选择控制器类型")]),t._v(" "),a("li",[t._v("激活控制器（初始化控制器）")])]),t._v(" "),a("p",[t._v("激活控制器后进入控制器消息管道中")]),t._v(" "),a("h4",{attrs:{id:"select-controller-action"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#select-controller-action"}},[t._v("#")]),t._v(" Select Controller Action")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/1366611-879a6cc2cb7dba01.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:""}})]),t._v(" "),a("p",[t._v("依据请求的 URL ，创建 Api 控制器，并选着对应的\nAction，经由 IHttpActionInvoker 处理后返回 HttpActionDescriptor（Action的描述）")]),t._v(" "),a("h4",{attrs:{id:"authentication-filters"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#authentication-filters"}},[t._v("#")]),t._v(" Authentication Filters")]),t._v(" "),a("p",[t._v("授权过滤器，请求进入后，如果对应的请求需要进行授权校验，则依据 Authentication Filters 来进行权限校验，同样的，如果授权失败，则授权过滤器会直接创建一个错误响应，使得管道中的其余操作都被跳过。\n授权通过后，进入模型绑定。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/1366611-a49f2eda0a3af391.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:""}})]),t._v(" "),a("h4",{attrs:{id:"model-binding"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#model-binding"}},[t._v("#")]),t._v(" Model Binding")]),t._v(" "),a("p",[t._v("模型绑定使用请求为 Action 的参数创建值。这些值在调用 Action 时传递给 Action 。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/1366611-867143ea94d088a9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:""}})]),t._v(" "),a("p",[t._v("请求信息中包含了：")]),t._v(" "),a("ul",[a("li",[t._v("URL")]),t._v(" "),a("li",[t._v("Headers")]),t._v(" "),a("li",[t._v("Entity-body")])]),t._v(" "),a("p",[t._v("对应的绑定方式也有三种")]),t._v(" "),a("ul",[a("li",[t._v("FormatterParameterBinding：如果请求体不为空，则会匹配该类型的模型绑定方式；")]),t._v(" "),a("li",[t._v("ModelBinderParameterBinding： 默认的绑定方式，即从 URL 的路径和查询字符串中进行简单类型绑定；")]),t._v(" "),a("li",[t._v("HttpParameterBinding：自定义参数绑定可以读取任何 http 请求。")])]),t._v(" "),a("p",[t._v("接下来进入 Action 过滤器")]),t._v(" "),a("h4",{attrs:{id:"action-filter"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#action-filter"}},[t._v("#")]),t._v(" Action Filter")]),t._v(" "),a("p",[t._v("Action Filter 会被调用两次，分别为 Action 执行前和 Action 执行之后。ActionFilterAttribute类中包含了 Action Filter 的两个方法（包含异步方法）")]),t._v(" "),a("ul",[a("li",[t._v("OnActionExecuting - Action执行开始前触发")]),t._v(" "),a("li",[t._v("OnActionExecuted - Action执行结束后触发")])]),t._v(" "),a("p",[t._v("接下来就是进入到 Action 中")]),t._v(" "),a("h4",{attrs:{id:"invoke-action"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#invoke-action"}},[t._v("#")]),t._v(" Invoke Action")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/1366611-66490b6cbc3675e3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:""}})]),t._v(" "),a("p",[t._v("调用 控制器的 Action ，使用 HttpActionContext 作为绑定和模型状态")]),t._v(" "),a("p",[t._v("如果发生异常，则进入 Exception Filter中")]),t._v(" "),a("h4",{attrs:{id:"exception-filters"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#exception-filters"}},[t._v("#")]),t._v(" Exception Filters")]),t._v(" "),a("p",[t._v("未处理的异常会被路由到异常过滤器。\nException Filter 会创建一个错误的响应，并结束此次请求过程。")]),t._v(" "),a("h4",{attrs:{id:"result-conversion"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#result-conversion"}},[t._v("#")]),t._v(" Result Conversion")]),t._v(" "),a("p",[t._v("如果请求正确执行，就会进入到结果转换过程中\n"),a("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/1366611-d48f85cff478adfb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:""}})]),t._v(" "),a("p",[t._v("Action 的返回值会被转换为HttpResponseMessage。")]),t._v(" "),a("ul",[a("li",[t._v("HttpResponseMessage")])]),t._v(" "),a("blockquote",[a("p",[t._v("如果返回的是 HttpResponseMessage，则直接通过")])]),t._v(" "),a("ul",[a("li",[t._v("void")])]),t._v(" "),a("blockquote",[a("p",[t._v("如果返回的是 void，那么会创建一个状态码为204的响应，表示执行成功且无返回值。")])]),t._v(" "),a("ul",[a("li",[t._v("IHttpActionResult")])]),t._v(" "),a("blockquote",[a("p",[t._v("如果返回的是 IHttpActionResult，则会调用 ExecuteAync 去创建一个 HttpResponseMessage。")])]),t._v(" "),a("ul",[a("li",[t._v("Other types")])]),t._v(" "),a("blockquote",[a("p",[t._v("如果都不是以上三种类型，则一个 media-type  格式化程序序列化该值并将其写入消息体。")])])])}),[],!1,null,null,null);e.default=s.exports}}]);